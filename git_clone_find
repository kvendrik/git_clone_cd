#!/usr/bin/env bash

git_clone_find() {
  verbose=false
  first_log=true
  arguments=()

  print_help() {
    cat << EOF
Usage: git_clone_find [-v|--verbose|-h|--help] <ssh_url_or_repo_name> [<folder_name>]

Finds Git repositories, clones them and moves into the folder.

Flags:

-h | --help                  Display this help message
-v | --verbose               Verbose mode

Arguments:

ssh_url_or_repo_name:        A SHH clone URL, repository name (will search through your set GCF_GITHUB_USERNAMES)
                            or repository identifier (e.g. kvendrik/dotfiles)
folder_name:                 Name of the folder it should clone into. Defaults to the name of the repository.

Check out https://github.com/kvendrik/git_clone_find for more info.
EOF
  }

  log() {
    if [[ "$verbose" == true && $first_log == false ]]; then
      echo -e "\n$1"
    else
      echo -e "$1"
    fi
    first_log=false
  }

  git_clone() {
    if [[ "$verbose" == true ]]; then
      git clone "$1" "$2"
    else
      git clone "$1" "$2" &> /dev/null
    fi
  }

  get_argument() {
    # fixes bug caused by ZSH arrays starting at index 1
    # and Bash arrays starting at index 0
    # more info: https://unix.stackexchange.com/questions/252368/is-there-a-reason-why-the-first-element-of-a-zsh-array-is-indexed-by-1-instead-o
    [[ "${arguments[0]}" == '' && "${arguments[1]}" != '' ]] && echo "${arguments[(($1+1))]}" || echo "${arguments[$1]}"
  }

  for argument in "$@"; do
    if [[ "$argument" == '--verbose' || "$argument" == '-v' ]]; then
      verbose=true
      continue
    fi

    if [[ "$argument" == '--help' || "$argument" == '-h' ]]; then
      print_help
      return
    fi

    arguments+=("$argument")
  done

  repo_name_url=$(get_argument 0)
  folder_name=$(get_argument 1)

  if [ -z "$repo_name_url" ]; then
    print_help
    return
  fi

  if [[ $repo_name_url =~ ^git@ ]]; then
    if [[ -z "$folder_name" ]]; then
      final_folder_name="$(basename "$repo_name_url" | sed -e 's/\.git//g')"
    else
      final_folder_name="$folder_name"
    fi

    verbose=true
    git_clone "$repo_name_url" "$final_folder_name" && cd "$final_folder_name" || return
    return
  fi

  split_repo_name="$(echo "$repo_name_url" | awk -F "/" '{print $2}')"

  if [ "$split_repo_name" != '' ]; then
    if [[ -z "$folder_name" ]]; then
      final_folder_name="$split_repo_name"
    else
      final_folder_name="$folder_name"
    fi

    clone_url="git@github.com:$repo_name_url.git"
    log "Trying $clone_url. \e[2mCloning into $final_folder_name.\e[0m"

    verbose=true
    git_clone "$clone_url" "$final_folder_name" && cd "$final_folder_name" || return
    return
  fi

  if [[ -z "${GCF_GITHUB_USERNAMES}" ]]; then
    echo 'Repository identifier is non-specific and GCF_GITHUB_USERNAMES is not defined.'
    return
  fi

  if [[ -z "$folder_name" ]]; then
    final_folder_name="$repo_name_url"
  else
    final_folder_name="$folder_name"
  fi

  for username in "${GCF_GITHUB_USERNAMES[@]}"; do
    clone_url="git@github.com:$username/$repo_name_url.git"
    log "Trying $clone_url. \e[2mCloning into $final_folder_name.\e[0m"

    if git_clone "$clone_url" "$final_folder_name"; then
      cd "$final_folder_name" || return
      return
    fi
  done

  log "$repo_name_url could not be cloned. This usually means the repository could not be found. Run the command again with the --verbose flag for more info."
}
